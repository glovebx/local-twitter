// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	model "github.com/sentrionic/mirage/model"
	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// ChangeAvatar provides a mock function with given fields: header, directory
func (_m *UserService) ChangeAvatar(header *multipart.FileHeader, directory string) (string, error) {
	ret := _m.Called(header, directory)

	var r0 string
	if rf, ok := ret.Get(0).(func(*multipart.FileHeader, string) string); ok {
		r0 = rf(header, directory)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*multipart.FileHeader, string) error); ok {
		r1 = rf(header, directory)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeBanner provides a mock function with given fields: header, directory
func (_m *UserService) ChangeBanner(header *multipart.FileHeader, directory string) (string, error) {
	ret := _m.Called(header, directory)

	var r0 string
	if rf, ok := ret.Get(0).(func(*multipart.FileHeader, string) string); ok {
		r0 = rf(header, directory)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*multipart.FileHeader, string) error); ok {
		r1 = rf(header, directory)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeFollow provides a mock function with given fields: user, current
func (_m *UserService) ChangeFollow(user *model.User, current string) error {
	ret := _m.Called(user, current)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.User, string) error); ok {
		r0 = rf(user, current)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteImage provides a mock function with given fields: key
func (_m *UserService) DeleteImage(key string) error {
	ret := _m.Called(key)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByUsername provides a mock function with given fields: username
func (_m *UserService) FindByUsername(username string) (*model.User, error) {
	ret := _m.Called(username)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(string) *model.User); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: uid
func (_m *UserService) Get(uid string) (*model.User, error) {
	ret := _m.Called(uid)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(string) *model.User); ok {
		r0 = rf(uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: email, password
func (_m *UserService) Login(email string, password string) (*model.User, error) {
	ret := _m.Called(email, password)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(string, string) *model.User); ok {
		r0 = rf(email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: user
func (_m *UserService) Register(user *model.User) (*model.User, error) {
	ret := _m.Called(user)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(*model.User) *model.User); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Search provides a mock function with given fields: term
func (_m *UserService) Search(term string) (*[]model.User, error) {
	ret := _m.Called(term)

	var r0 *[]model.User
	if rf, ok := ret.Get(0).(func(string) *[]model.User); ok {
		r0 = rf(term)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(term)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: user
func (_m *UserService) Update(user *model.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
